# These environment variables must be set in CircleCI UI
#
# DOCKERHUB_REPO - docker hub repo, format: <username>/<repo>
# DOCKER_USER
# DOCKER_PASS
#
version: 2
jobs:
  unit-test:
    docker:
      - image: python:3.7-buster
    working_directory: /usr/src/app
    steps:
      - checkout
      - run:
          name: run code checks and unit tests
          command: |
            pip install pipenv
            pipenv install --dev
            make format && test "$(git diff | wc -l)" = "0"
            make style-check
            make test
  build-image-and-integration-test:
    docker:
      - image: python:3.7-buster
      - image: docker:18.02.0-ce
    steps:
      - setup_remote_docker:
          version: 18.02.0-ce
      - checkout
      # use a primary image that already has Docker (recommended)
      # or install it during a build like we do here
      - run:
          name: Install Docker client
          command: |
            set -x
            VER="18.06.3-ce"
            curl -L -o /tmp/docker-$VER.tgz https://download.docker.com/linux/static/stable/x86_64/docker-$VER.tgz
            tar -xz -C /tmp -f /tmp/docker-$VER.tgz
            mv /tmp/docker/* /usr/bin
      - run:
          name: build image run repo analysis image and check results
          command: |
            make build-image run-repo-analysis-in-image check-channelserver-repo-analysis
      - run:
          name: save the built docker container to CircleCI cache
          no_output_timeout: 30m
          command: |
            docker save "fpr:build" | gzip -c > /tmp/cache/docker.tgz
      - save_cache:
          key: v1-{{ .Branch }}-{{ epoch }}
          paths:
            - /tmp/cache/docker.tgz

  deploy:
    docker:
      - image: docker:18.02.0-ce
    steps:
      - restore_cache:
          key: v1-{{.Branch}}
      - setup_remote_docker:
          version: 18.02.0-ce
      - run:
          name: Deploy to Dockerhub
          command: |
            # deploy master
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
              docker login -u $DOCKER_USER -p $DOCKER_PASS
              docker tag fpr:build ${DOCKERHUB_REPO}:latest
              docker push ${DOCKERHUB_REPO}:latest
            elif  [ ! -z "${CIRCLE_TAG}" ]; then
            # deploy a release tag...
              docker login -u $DOCKER_USER -p $DOCKER_PASS
              echo "${DOCKERHUB_REPO}:${CIRCLE_TAG}"
              docker tag fpr:build "${DOCKERHUB_REPO}:${CIRCLE_TAG}"
              docker images
              docker push "${DOCKERHUB_REPO}:${CIRCLE_TAG}"
            fi

workflows:
  version: 2
  test:
    jobs:
      - unit-test:
          filters:
            tags:
              only: /.*/
      - build-image-and-integration-test:
          filters:
            tags:
              only: /.*/
      - deploy:
          requires:
            - unit-test
            - build-image-and-integration-test
          filters:
            tags:
              # only upload the docker container on semver tags
              only: /[0-9]\.[0-9]\.[0-9]/
            branches:
              only: master
